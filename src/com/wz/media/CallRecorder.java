package com.wz.media;

import java.io.File;

import android.text.format.Time;

// Simple class to support call recording.
public class CallRecorder
{
	// True if we have finished writing the outgoing stream.
	boolean outgoingStopped = false;
	// True if we have finished the incoming one. When both true the output file is closed.
	boolean incomingStopped = false;
	// The output wav file.
	WavWriter callWav = null;	
	
	// Filename is without the /sdcard/Ripdroid, or the .wav ending.
	// If null it is autogenerated from the current time/date.
	// Existing files are silently overwritten!
	public CallRecorder(String filename,int sample_rate)
	{
		if (filename == null)
		{
			Time t = new Time();
			t.setToNow();
			filename = t.format2445(); // Create filename from current date.
		}
		
		// Make sure directory exists.
		File dir = new File("/sdcard/Sipdroid_Recordings/");
		dir.mkdirs();
		
		// If this fails, all of the other calls just silently return immediately.
		callWav = new WavWriter("/sdcard/Sipdroid_Recordings/" + filename + ".wav",sample_rate);
	}
	
	// Write data received from the internet.
	public void writeIncoming(short[] buffer, int offs, int len)
	{
		if (callWav == null)
			return;
		callWav.writeLeft(buffer, offs, len);
	}
	// Write audio from the mic.
	public void writeOutgoing(short[] buffer, int offs, int len)
	{
		if (callWav == null)
			return;
		callWav.writeRight(buffer, offs, len);
	}
	// We won't write any more incoming data.
	public void stopIncoming()
	{
		incomingStopped = true;
		checkClose();
	}
	// We won't write any more outgoing data.
	public void stopOutgoing()
	{
		outgoingStopped = true;
		checkClose();
	}

	// Check to see if no more data will be written. If so close the wav file.
	private void checkClose()
	{
		if (!outgoingStopped || !incomingStopped)
			return;
		
		if (callWav == null)
			return;
	
		callWav.close();
		callWav = null;
	}
}
